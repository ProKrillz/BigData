// <auto-generated />
using System;
using DataStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataStorage.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230514134543_v4")]
    partial class v4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataStorage.Entities.CoordinateEntity", b =>
                {
                    b.Property<int>("CoordinateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoordinateId"));

                    b.Property<int>("FK_GemoetryId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("value");

                    b.HasKey("CoordinateId")
                        .HasName("coordinate_id");

                    b.HasIndex("FK_GemoetryId");

                    b.ToTable("Coordinate", (string)null);
                });

            modelBuilder.Entity("DataStorage.Entities.FeatureEntity", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<int>("FK_PropertiesId")
                        .HasColumnType("int");

                    b.Property<int>("FK_RootId")
                        .HasColumnType("int");

                    b.Property<string>("FeatureNumber")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("fearture_number");

                    b.Property<int>("Fk_GeometryId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("type");

                    b.HasKey("FeatureId")
                        .HasName("feature_id");

                    b.HasIndex("FK_PropertiesId")
                        .IsUnique();

                    b.HasIndex("FK_RootId");

                    b.HasIndex("Fk_GeometryId");

                    b.ToTable("Feature", (string)null);
                });

            modelBuilder.Entity("DataStorage.Entities.GeometryEntity", b =>
                {
                    b.Property<int>("GeometryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeometryId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("type");

                    b.HasKey("GeometryId")
                        .HasName("geometry_id");

                    b.ToTable("Geometry", (string)null);
                });

            modelBuilder.Entity("DataStorage.Entities.LinkEntity", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"));

                    b.Property<int>("FK_RootId")
                        .HasColumnType("int");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("href");

                    b.Property<string>("Rel")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("rel");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("LinkId")
                        .HasName("link_id");

                    b.HasIndex("FK_RootId");

                    b.ToTable("Link", (string)null);
                });

            modelBuilder.Entity("DataStorage.Entities.PropertiesEntity", b =>
                {
                    b.Property<int>("PropertiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertiesId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<DateTime>("Observed")
                        .HasColumnType("datetime2")
                        .HasColumnName("observed");

                    b.Property<string>("ParameterNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("parameter_number");

                    b.Property<string>("StationNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("station_number");

                    b.Property<double>("Value")
                        .HasMaxLength(10)
                        .HasColumnType("float")
                        .HasColumnName("value");

                    b.HasKey("PropertiesId")
                        .HasName("propeti_id");

                    b.ToTable("Properti", (string)null);
                });

            modelBuilder.Entity("DataStorage.Entities.RootEntity", b =>
                {
                    b.Property<int>("RootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RootId"));

                    b.Property<int>("NumberReturned")
                        .HasColumnType("int")
                        .HasColumnName("number_returned");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("time_stamp");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("type");

                    b.HasKey("RootId")
                        .HasName("root_id");

                    b.ToTable("Root", (string)null);
                });

            modelBuilder.Entity("DataStorage.Entities.CoordinateEntity", b =>
                {
                    b.HasOne("DataStorage.Entities.GeometryEntity", "Geometry")
                        .WithMany("Coordinates")
                        .HasForeignKey("FK_GemoetryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geometry");
                });

            modelBuilder.Entity("DataStorage.Entities.FeatureEntity", b =>
                {
                    b.HasOne("DataStorage.Entities.PropertiesEntity", "Properties")
                        .WithOne("Feature")
                        .HasForeignKey("DataStorage.Entities.FeatureEntity", "FK_PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStorage.Entities.RootEntity", "Root")
                        .WithMany("Features")
                        .HasForeignKey("FK_RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStorage.Entities.GeometryEntity", "Geometry")
                        .WithMany("Features")
                        .HasForeignKey("Fk_GeometryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geometry");

                    b.Navigation("Properties");

                    b.Navigation("Root");
                });

            modelBuilder.Entity("DataStorage.Entities.LinkEntity", b =>
                {
                    b.HasOne("DataStorage.Entities.RootEntity", "Root")
                        .WithMany("Links")
                        .HasForeignKey("FK_RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("DataStorage.Entities.GeometryEntity", b =>
                {
                    b.Navigation("Coordinates");

                    b.Navigation("Features");
                });

            modelBuilder.Entity("DataStorage.Entities.PropertiesEntity", b =>
                {
                    b.Navigation("Feature")
                        .IsRequired();
                });

            modelBuilder.Entity("DataStorage.Entities.RootEntity", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Links");
                });
#pragma warning restore 612, 618
        }
    }
}
